[{"path":"/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"J. Aravind. Author, maintainer. Kamil Slowikowski. Contributor.            Repel algorithm","code":""},{"path":"/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Aravind, J. (2022).  gglyph: Multivariate Data Visualization using Glyphs. R package version 0.0.0.9000, https://aravind-j.github.io/gglyph/.","code":"@Manual{,   title = {gglyph: Multivariate Data Visualization using Glyphs},   author = {J. Aravind},   year = {2022},   note = {R package version 0.0.0.9000},   note = {https://aravind-j.github.io/gglyph/}, }"},{"path":[]},{"path":[]},{"path":"/index.html","id":"aravind-j","dir":"","previous_headings":"gglyph: Multivariate Data Visualization using Glyphs","what":"Aravind, J.","title":"Multivariate Data Visualization using Glyphs","text":"Division Germplasm Conservation, ICAR-National Bureau Plant Genetic Resources, New Delhi.","code":""},{"path":"/index.html","id":"description","dir":"","previous_headings":"","what":"Description","title":"Multivariate Data Visualization using Glyphs","text":"Provides geoms visualizing multivariate data glyphs using ‘ggplot2’.","code":""},{"path":"/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Multivariate Data Visualization using Glyphs","text":"development version can installed github follows:","code":"# Install development version from Github devtools::install_github(\"aravind-j/gglyph\")"},{"path":"/index.html","id":"whats-new","dir":"","previous_headings":"","what":"What’s new","title":"Multivariate Data Visualization using Glyphs","text":"know whats new version type:","code":"news(package='gglyph')"},{"path":"/index.html","id":"links","dir":"","previous_headings":"","what":"Links","title":"Multivariate Data Visualization using Glyphs","text":"Github page Documentation website","code":""},{"path":"/index.html","id":"citing-gglyph","dir":"","previous_headings":"","what":"Citing gglyph","title":"Multivariate Data Visualization using Glyphs","text":"cite methods package use:","code":"citation(\"gglyph\") To cite the R package 'gglyph' in publications use:    Aravind, J. (2022).  gglyph: Multivariate Data Visualization using   Glyphs. R package version 0.0.0.9000,   https://aravind-j.github.io/gglyph/.  A BibTeX entry for LaTeX users is    @Manual{,     title = {gglyph: Multivariate Data Visualization using Glyphs},     author = {J. Aravind},     year = {2022},     note = {R package version 0.0.0.9000},     note = {https://aravind-j.github.io/gglyph/},   }  This free and open-source software implements academic research by the authors and co-workers. If you use it, please support the project by citing the package."},{"path":"/reference/dotglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Dot Profile Glyph — dotglyphGrob","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"Uses Grid graphics draw dot profile glyph (Chambers et al. 1983; duToit et al. 1986) .","code":""},{"path":"/reference/dotglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"","code":"dotglyphGrob(   x = 0.5,   y = 0.5,   z,   radius = 1,   col = \"black\",   fill = NA,   lwd = 1,   alpha = 1,   mirror = FALSE,   flip.axes = FALSE )"},{"path":"/reference/dotglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying values plotted dimensions dot glyph (number stacked dots). radius radius glyphs. col line colour. fill fill colour. lwd line width. alpha alpha transparency value. mirror logical. TRUE, mirror profile plotted. flip.axes logical. TRUE, axes flipped.","code":""},{"path":"/reference/dotglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"grob object.","code":""},{"path":"/reference/dotglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/dotglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Dot Profile Glyph — dotglyphGrob","text":"","code":"dg1 <- dotglyphGrob(x = 150, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2)  dg2 <- dotglyphGrob(x = 550, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE)  dg3 <- dotglyphGrob(x = 100, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, flip.axes = TRUE)  dg4 <- dotglyphGrob(x = 550, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE,                     flip.axes = TRUE)  grid::grid.newpage() grid::grid.draw(dg1) grid::grid.draw(dg2) grid::grid.draw(dg3) grid::grid.draw(dg4)   dg1 <- dotglyphGrob(x = 150, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, fill = \"black\", col = \"white\")  dg2 <- dotglyphGrob(x = 550, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE,                     fill = \"salmon\", col = \"black\")  dg3 <- dotglyphGrob(x = 100, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, flip.axes = TRUE,                     fill = \"cyan\", col = \"grey\")  dg4 <- dotglyphGrob(x = 550, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE,                     flip.axes = TRUE,                     fill = \"green\", col = \"grey\")  grid::grid.newpage() grid::grid.draw(dg1) grid::grid.draw(dg2) grid::grid.draw(dg3) grid::grid.draw(dg4)   clrs <- mapply(function(a, b) rep(a, b),                RColorBrewer::brewer.pal(6, \"Dark2\"),                round(c(4, 3.5, 2.7, 6.8, 3.4, 5.7))) clrs <- unlist(clrs)  dg1 <- dotglyphGrob(x = 150, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, fill = clrs, col = \"white\")  dg2 <- dotglyphGrob(x = 550, y = 300,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE,                     fill = clrs, col = \"black\")  dg3 <- dotglyphGrob(x = 100, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, flip.axes = TRUE,                     fill = \"black\", col = clrs, lwd = 5)  dg4 <- dotglyphGrob(x = 550, y = 550,                     z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                     radius = 2, mirror = TRUE,                     flip.axes = TRUE,                     col = clrs)  grid::grid.newpage() grid::grid.draw(dg1) grid::grid.draw(dg2) grid::grid.draw(dg3) grid::grid.draw(dg4)"},{"path":"/reference/geom_dotglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"dotglyph geom used plot multivariate data dot profile glyphs (Chambers et al. 1983; duToit et al. 1986)  scatterplot.","code":""},{"path":"/reference/geom_dotglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"","code":"geom_dotglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   radius = 1,   fill.dot = NULL,   fill.gradient = NULL,   linewidth = 1,   mirror = TRUE,   flip.axes = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_dotglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. radius radius glyphs. fill.dot fill colour stacked dots. fill.gradient palette gradient fill segments. See Details section col_numeric() function scales package available options. linewidth line width dot glyphs. mirror logical. TRUE, mirror profile plotted. flip.axes logical. TRUE, axes flipped. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_dotglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"geom layer.","code":""},{"path":"/reference/geom_dotglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"geom_dotglyph() understands following   aesthetics (required aesthetics bold): x y alpha colour fill group","code":""},{"path":"/reference/geom_dotglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/geom_dotglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Dot Profile Glyphs as a Scatterplot — geom_dotglyph","text":"","code":"# Convert data to classes zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\")  mtcars[ , zs] <- lapply(mtcars[, zs],                         function(x) cut(x, breaks = 5,                                         labels = c(1, 2, 3, 4, 5))) mtcars[ , zs] <- lapply(mtcars[ , zs], as.factor)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  # Mapped fill ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, radius = 0.5,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, radius = 0.5,                 mirror = FALSE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, radius = 0.5,                 flip.axes = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, radius = 0.5,                 mirror = FALSE, flip.axes = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   # Mapped colour ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, radius = 0.5,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, radius = 0.5,                 mirror = FALSE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, radius = 0.5,                 flip.axes = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, radius = 0.5,                 mirror = FALSE, flip.axes = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   # Different fill colours ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 fill.dot = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 mirror = FALSE,                 fill.dot = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 flip.axes = TRUE,                 fill.dot = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 mirror = FALSE, flip.axes = TRUE,                 fill.dot = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   # Gradient fill ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 fill.gradient = \"Greens\",                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 fill.gradient = \"Blues\",                 mirror = FALSE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 flip.axes = TRUE,                 fill.gradient = \"RdYlBu\",                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 mirror = FALSE, flip.axes = TRUE,                 fill.gradient = \"viridis\",                 alpha =  0.8) +   ylim(c(-0, 550))   # Faceted ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, radius = 0.5,                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, radius = 0.5,                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 fill.dot = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_dotglyph(aes(x = mpg, y = disp),                 cols = zs, radius = 0.5,                 fill.gradient = \"viridis\",                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)"},{"path":"/reference/geom_metroglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Metroglyphs as a Scatterplot — geom_metroglyph","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"metroglyph geom used plot multivariate data metroglyphs (Anderson 1957; duToit et al. 1986)  scatterplot.","code":""},{"path":"/reference/geom_metroglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"","code":"geom_metroglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   circle.size = 1,   colour.circle = NULL,   colour.ray = NULL,   colour.points = NULL,   linewidth.circle = 1,   linewidth.ray = 1,   lineend = \"butt\",   full = TRUE,   draw.grid = FALSE,   grid.point.size = 1,   show.legend = NA,   repel = FALSE,   repel.control = gglyph.repel.control(),   inherit.aes = TRUE )"},{"path":"/reference/geom_metroglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. circle.size size central circle (radius). colour.circle colour circles. colour.ray colour rays. colour.points colour grid points. linewidth.circle circle line width. linewidth.ray ray line width. lineend line end style rays. Either \"round\", \"butt\" \"square\". full logical. TRUE, full star glyphs (360°) plotted, otherwise half star glyphs (180°) plotted. draw.grid logical. TRUE, grid points plotted along whiskers variables specified cols type factor. Default FALSE. grid.point.size size grid points native units. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. repel logical. TRUE, glyphs repel away avoid overlaps. Default FALSE. repel.control list control settings repel algorithm. Ignored repel = FALSE. See gglyph.repel.control details  various control parameters. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_metroglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"geom layer.","code":""},{"path":"/reference/geom_metroglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"geom_metroglyph() understands following   aesthetics (required aesthetics bold): x y alpha colour fill group circle.size See vignette(\"ggplot2-specs\", package = \"ggplot2\")   details setting aesthetics. following additional aesthetics considered repel = TRUE: point.size segment.linetype segment.colour segment.size segment.alpha segment.curvature segment.angle segment.ncp segment.shape segment.square segment.squareShape segment.inflect segment.debug See ggrepel   examples page   details setting aesthetics.","code":""},{"path":"/reference/geom_metroglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"Anderson E (1957). “semigraphical method analysis complex problems.” Proceedings National Academy Sciences United States America, 43(10), 923. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/geom_metroglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Metroglyphs as a Scatterplot — geom_metroglyph","text":"","code":"# Scale the data zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  # Mapped colour ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2, fill = \"gray30\",                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   full = FALSE,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   full = FALSE,                   linewidth.circle = 2, linewidth.ray = 2, fill = \"gray30\",                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   # Mapped colour + fill ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   full = FALSE,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   # Mapped fill ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   colour.circle = \"transparent\",                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   full = FALSE,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   full = FALSE, colour.circle = \"transparent\",                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   # Rays with colours ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp),                   cols = zs, circle.size = 3,                   linewidth.circle = 0, linewidth.ray = 2,                   colour.circle = \"transparent\", fill = \"gray\",                   colour.ray = RColorBrewer::brewer.pal(8, \"Dark2\"),                   size = 10, alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp),                   cols = zs, circle.size = 3,                   linewidth.circle = 0, linewidth.ray = 2,                   colour.circle = \"transparent\", fill = \"gray\",                   colour.ray = RColorBrewer::brewer.pal(8, \"Dark2\"),                   size = 10, alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   # Faceted ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   # Repel glyphs ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp, colour = cyl)) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 10, alpha =  1, repel = TRUE) +   ylim(c(-0, 550)) #> Warning: 14 glyphs have too many overlaps. #> Consider increasing \"max.overlaps\"   ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp, colour = cyl)) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   colour.circle = \"transparent\",                   size = 10, alpha =  1, repel = TRUE) +   ylim(c(-0, 550)) #> Warning: 14 glyphs have too many overlaps. #> Consider increasing \"max.overlaps\"   ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp)) +   geom_metroglyph(aes(x = mpg, y = disp),                   cols = zs, circle.size = 3,                   linewidth.circle = 0, linewidth.ray = 2,                   colour.circle = \"transparent\", fill = \"gray\",                   colour.ray = RColorBrewer::brewer.pal(8, \"Dark2\"),                   size = 10, alpha =  1, repel = TRUE) +   ylim(c(-0, 550)) #> Warning: 11 glyphs have too many overlaps. #> Consider increasing \"max.overlaps\"   rm(mtcars) mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars[ , zs] <- lapply(mtcars[, zs],                         function(x) cut(x, breaks = 3,                                         labels = c(1, 2, 3))) mtcars[ , zs] <- lapply(mtcars[ , zs], as.factor)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  # Grid points ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, colour = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 2.5, alpha =  0.8,                   draw.grid = TRUE, grid.point.size = 5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp, fill = cyl),                   cols = zs, circle.size = 3, colour.ray = NULL,                   linewidth.circle = 2, linewidth.ray = 2,                   size = 2.5, alpha =  0.8,                   draw.grid = TRUE, grid.point.size = 5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_metroglyph(aes(x = mpg, y = disp),                   cols = zs, circle.size = 3,                   linewidth.circle = 0, linewidth.ray = 2,                   colour.circle = \"transparent\", fill = \"gray\",                   colour.ray = RColorBrewer::brewer.pal(8, \"Dark2\"),                   size = 2.5, alpha =  0.8,                   draw.grid = TRUE, grid.point.size = 5) +   ylim(c(-0, 550))"},{"path":"/reference/geom_pieglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"pieglyph geom used plot multivariate data pie glyphs (Ward Lipchak 2000; Fuchs et al. 2013)  scatterplot.","code":""},{"path":"/reference/geom_pieglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"","code":"geom_pieglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   edges = 200,   fill.segment = NULL,   fill.gradient = NULL,   colour.grid = NULL,   linewidth = 1,   linewidth.grid = linewidth,   scale.segment = FALSE,   scale.radius = TRUE,   full = TRUE,   draw.grid = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_pieglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. edges number edges polygon depict circular glyph outline. fill.segment fill colour segments. fill.gradient palette gradient fill segments. See Details section col_numeric() function scales package available options. colour.grid colour grid lines. linewidth line width segments. linewidth.grid line width grid lines. scale.segment logical. TRUE, segments (pie slices) scaled according value cols. scale.radius logical. TRUE, radius segments (pie slices) scaled according value cols. full logical. TRUE, full star glyphs (360°) plotted, otherwise half star glyphs (180°) plotted. draw.grid logical. TRUE, grid points plotted along whiskers variables specified cols type factor. Default FALSE. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_pieglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"geom layer.","code":""},{"path":"/reference/geom_pieglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"geom_pieglyph() understands following   aesthetics (required aesthetics bold): x y alpha colour fill group size","code":""},{"path":"/reference/geom_pieglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"Fuchs J, Fischer F, Mansmann F, Bertini E, Isenberg P (2013). “Evaluation alternative glyph designs time series data small multiple setting.” Proceedings SIGCHI Conference Human Factors Computing Systems, 3237--3246. ISBN 978-1-4503-1899-0. Ward MO, Lipchak BN (2000). “visualization tool exploratory analysis cyclic multivariate data.” Metrika, 51(1), 27--37.","code":""},{"path":[]},{"path":"/reference/geom_pieglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Pie Glyphs as a Scatterplot — geom_pieglyph","text":"","code":"zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  # Mapped fill + scaled radius ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 10,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 10,                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   # Mapped fill + scaled segment ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   # Mapped colour + scaled radius ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 10,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 10, fill = \"white\",                 alpha =  0.8,  linewidth = 2) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 10,                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 10, fill = \"white\",                 alpha =  0.8,  linewidth = 2, full = FALSE) +   ylim(c(-0, 550))   # Mapped colour + scaled segment ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 5, fill = \"white\",                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8, linewidth = 2) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 5, fill = \"white\",                 scale.radius = FALSE, scale.segment = TRUE,                 alpha =  0.8, linewidth = 2, full = FALSE) +   ylim(c(-0, 550))   # Segments with colours + scaled radius ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 10,                 fill.segment = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 10,                 fill.segment = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   # Segments with colours + scaled segment (scatterpie) ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 fill.segment = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = TRUE,                 fill.segment = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8, full = FALSE) +   ylim(c(-0, 550))   # Gradient fill ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = FALSE,                 fill.gradient = \"Greens\",                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = FALSE,                 fill.gradient = \"Blues\",                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = FALSE,                 fill.gradient = \"RdYlBu\",                 alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 5,                 scale.radius = FALSE, scale.segment = FALSE,                 fill.gradient = \"viridis\",                 alpha =  0.8) +   ylim(c(-0, 550))   # Faceted ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 10,                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 10,                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 10,                 fill.segment = RColorBrewer::brewer.pal(8, \"Dark2\"),                 alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   rm(mtcars) mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars[ , zs] <- lapply(mtcars[, zs],                         function(x) cut(x, breaks = 3,                                         labels = c(1, 2, 3))) mtcars[ , zs] <- lapply(mtcars[ , zs], as.factor)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  # Grid lines (when scale.radius = TRUE) ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, fill = cyl),                 cols = zs, size = 2,                 alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp, colour = cyl),                 cols = zs, size = 2,                 alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_pieglyph(aes(x = mpg, y = disp),                 cols = zs, size = 2,                 scale.radius = TRUE, scale.segment = FALSE,                 fill.gradient = \"Blues\",                 alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))"},{"path":"/reference/geom_profileglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"profileglyph geom used plot multivariate data profile glyphs (Chambers et al. 1983; duToit et al. 1986)  scatterplot.","code":""},{"path":"/reference/geom_profileglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"","code":"geom_profileglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   width = 10,   size = 1,   colour.bar = NULL,   colour.line = NULL,   colour.grid = NULL,   linewidth.line = 1,   linewidth.bar = 1,   linewidth.grid = 1,   fill.bar = NULL,   fill.gradient = NULL,   flip.axes = FALSE,   bar = TRUE,   line = TRUE,   mirror = TRUE,   draw.grid = FALSE,   show.legend = NA,   inherit.aes = TRUE )"},{"path":"/reference/geom_profileglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. width width bars. size size glyphs. colour.bar colour bars. colour.line colour profile line(s). colour.grid colour grid lines. linewidth.line line width profile line(s) linewidth.bar line width bars. linewidth.grid line width grid lines. fill.bar fill colour bars. fill.gradient palette gradient fill segments. See Details section col_numeric() function scales package available options. flip.axes logical. TRUE, axes flipped. bar logical. TRUE, profile bars plotted. line logical. TRUE, profile line plotted. mirror logical. TRUE, mirror profile plotted. draw.grid logical. TRUE, grid points plotted along whiskers variables specified cols type factor. Default FALSE. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_profileglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"geom layer.","code":""},{"path":"/reference/geom_profileglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"geom_pieglyph() understands following   aesthetics (required aesthetics bold): x y alpha colour fill group","code":""},{"path":"/reference/geom_profileglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/geom_profileglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Profile Glyphs as a Scatterplot — geom_profileglyph","text":"","code":"# Scale the data zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Mapped fill + line ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Mapped fill + bar ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Mapped colour + bar and line ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Mapped colour + line ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     line = FALSE, mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Mapped colour + bar ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     bar = FALSE, mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Bars with different fill + bar and line ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Bars with different fill + bar ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Bars with gradient fill + bar and line ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.gradient = \"Greens\",                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.gradient = \"Blues\",                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.gradient = \"RdYlBu\",                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.gradient = \"viridis\",                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Bars with gradient fill + bar ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.gradient = \"Greens\",                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.gradient = \"Blues\",                     mirror = FALSE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.gradient = \"RdYlBu\",                     flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     line = FALSE,                     fill.gradient = \"viridis\",                     mirror = FALSE, flip.axes = TRUE,                     alpha =  0.8) +   ylim(c(-0, 550))   # Faceted ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 5, width = 1,                     alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, colour = cyl),                     cols = zs, size = 5, width = 1,                     alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp),                     cols = zs, size = 5, width = 1,                     fill.bar = RColorBrewer::brewer.pal(8, \"Dark2\"),                     alpha =  0.8) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   rm(mtcars) mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars[ , zs] <- lapply(mtcars[, zs],                         function(x) cut(x, breaks = 3,                                         labels = c(1, 2, 3))) mtcars[ , zs] <- lapply(mtcars[ , zs], as.factor)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  # Grid lines (when bar = TRUE) ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 3, width = 1,                     alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, col = cyl),                     cols = zs, size = 3, width = 1,                     alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_profileglyph(aes(x = mpg, y = disp, fill = cyl),                     cols = zs, size = 3, width = 1,                     fill.gradient = \"Blues\",                     alpha =  0.8, draw.grid = TRUE) +   ylim(c(-0, 550))"},{"path":"/reference/geom_starglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Star Glyphs as a Scatterplot — geom_starglyph","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"starglyph geom used plot multivariate data star glyphs (Siegel et al. 1972; Chambers et al. 1983; duToit et al. 1986)  scatterplot.","code":""},{"path":"/reference/geom_starglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"","code":"geom_starglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   whisker = TRUE,   contour = TRUE,   colour.whisker = NULL,   colour.contour = NULL,   colour.points = NULL,   linewidth.whisker = 1,   linewidth.contour = 1,   full = TRUE,   draw.grid = FALSE,   grid.point.size = 1,   show.legend = NA,   repel = FALSE,   repel.control = gglyph.repel.control(),   inherit.aes = TRUE )"},{"path":"/reference/geom_starglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. whisker logical. TRUE, plots star glyph whiskers. contour logical. TRUE, plots star glyph contours. colour.whisker colour whiskers. colour.contour colour contours. colour.points colour grid points. linewidth.whisker whisker line width. linewidth.contour contour line width. full logical. TRUE, full star glyphs (360°) plotted, otherwise half star glyphs (180°) plotted. draw.grid logical. TRUE, grid points plotted along whiskers variables specified cols type factor. Default FALSE. grid.point.size size grid points native units. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. repel logical. TRUE, glyphs repel away avoid overlaps. Default FALSE. repel.control list control settings repel algorithm. Ignored repel = FALSE. See gglyph.repel.control details  various control parameters. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_starglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"geom layer.","code":""},{"path":"/reference/geom_starglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"geom_starglyph() understands following   aesthetics (required aesthetics bold): x y alpha colour fill group shape size stroke linetype See vignette(\"ggplot2-specs\", package = \"ggplot2\")   details setting aesthetics. following additional aesthetics considered repel = TRUE: point.size segment.linetype segment.colour segment.size segment.alpha segment.curvature segment.angle segment.ncp segment.shape segment.square segment.squareShape segment.inflect segment.debug See ggrepel   examples page   details setting aesthetics.","code":""},{"path":"/reference/geom_starglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2. Siegel JH, Farrell EJ, Goldwyn RM, Friedman HP (1972). “surgical implications physiologic patterns myocardial infarction shock.” Surgery, 72(1), 126--141.","code":""},{"path":[]},{"path":"/reference/geom_starglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Star Glyphs as a Scatterplot — geom_starglyph","text":"","code":"# Scale the data zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  # Both whiskers and contour ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha =  0.5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha =  0.5, full = FALSE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha =  0.5,                  linewidth.whisker = 3, linewidth.contour = 0.1) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha =  0.5,                  linewidth.whisker = 1, linewidth.contour = 3) +   ylim(c(-0, 550))    # Only contours (polygon) ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = FALSE, contour = TRUE,                  size = 10, alpha =  0.5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = FALSE, contour = TRUE,                  size = 10, alpha =  0.5, linewidth.contour = 3) +   ylim(c(-0, 550))   # Only whiskers ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, colour = cyl),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 10) +   geom_point(data = mtcars, aes(x = mpg, y = disp, colour = cyl)) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, colour = cyl),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 10, full = FALSE) +   geom_point(data = mtcars, aes(x = mpg, y = disp, colour = cyl)) +   ylim(c(-0, 550))   # Whiskers with colours ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 10,                  colour.whisker = RColorBrewer::brewer.pal(8, \"Dark2\")) +   geom_point(data = mtcars, aes(x = mpg, y = disp)) +   ylim(c(-0, 550))   # With text annotations ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, colour = cyl),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 10) +   geom_point(data = mtcars, aes(x = mpg, y = disp, colour = cyl)) +   geom_text(data = mtcars, aes(x = mpg, y = disp, label = lab), cex = 2) +   ylim(c(-0, 550))   # Faceted ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha =  0.5) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, colour = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10) +   ylim(c(-0, 550)) +   facet_grid(. ~ cyl)   # Repel glyphs ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp, colour = cyl)) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 10, alpha = 1, repel = TRUE) +   ylim(c(-0, 550)) +   xlim(c(8, 35)) #> Warning: 5 glyphs have too many overlaps. #> Consider increasing \"max.overlaps\"   rm(mtcars) mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars[ , zs] <- lapply(mtcars[, zs],                         function(x) cut(x, breaks = 3,                                         labels = c(1, 2, 3))) mtcars[ , zs] <- lapply(mtcars[ , zs], as.factor)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  # Grid points ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, fill = cyl),                  cols = zs, whisker = TRUE, contour = TRUE,                  size = 3, alpha =  0.5, draw.grid = TRUE,                  grid.point.size = 5) +   ylim(c(-0, 550))    ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp, colour = cyl),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 3, draw.grid = TRUE, grid.point.size = 7,                  linewidth.whisker = 2, alpha = 0.7) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_starglyph(aes(x = mpg, y = disp),                  cols = zs, whisker = TRUE, contour = FALSE,                  size = 3, draw.grid = TRUE,                  grid.point.size = 5, alpha =  0.8,                  colour.whisker = RColorBrewer::brewer.pal(8, \"Dark2\")) +   geom_point(data = mtcars, aes(x = mpg, y = disp)) +   ylim(c(-0, 550))"},{"path":"/reference/geom_tileglyph.html","id":null,"dir":"Reference","previous_headings":"","what":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"tileglyph geom used plot multivariate data tile glyphs similar 'autoglyph' (Beddow 1990)  'stripe glyph' (Fuchs et al. 2013)  scatterplot.","code":""},{"path":"/reference/geom_tileglyph.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"","code":"geom_tileglyph(   mapping = NULL,   data = NULL,   stat = \"identity\",   position = \"identity\",   ...,   cols = character(0L),   colour = \"black\",   ratio = 1,   nrow = 1,   linewidth = 1,   fill.gradient = NULL,   show.legend = NA,   repel = FALSE,   repel.control = gglyph.repel.control(),   inherit.aes = TRUE )"},{"path":"/reference/geom_tileglyph.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"mapping Set aesthetic mappings created aes() aes_(). specified inherit.aes = TRUE (default), combined default mapping top level plot. must supply mapping plot mapping. data data displayed layer. three options: NULL, default, data inherited plot data specified call ggplot(). data.frame, object, override plot data. objects fortified produce data frame. See fortify() variables created. function called single argument, plot data. return value must data.frame, used layer data. function can created formula (e.g. ~ head(.x, 10)). stat statistical transformation use data layer, string. position Position adjustment, either string, result call position adjustment function. ... arguments passed layer(). often aesthetics, used set aesthetic fixed value, like colour = \"green\" size = 3. may also parameters paired geom/stat. cols Name columns specifying variables plotted glyphs character vector. colour colour tile glyphs. ratio aspect ratio (height / width). nrow number rows. linewidth line width tile glyphs. fill.gradient palette gradient fill segments. See Details section col_numeric() function scales package available options. show.legend logical. layer included legends? NA, default, includes aesthetics mapped. FALSE never includes, TRUE always includes. can also named logical vector finely select aesthetics display. repel logical. TRUE, glyphs repel away avoid overlaps. Default FALSE. repel.control list control settings repel algorithm. Ignored repel = FALSE. See gglyph.repel.control details  various control parameters. inherit.aes FALSE, overrides default aesthetics, rather combining . useful helper functions define data aesthetics inherit behaviour default plot specification, e.g. borders().","code":""},{"path":"/reference/geom_tileglyph.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"geom layer.","code":""},{"path":"/reference/geom_tileglyph.html","id":"aesthetics","dir":"Reference","previous_headings":"","what":"Aesthetics","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"geom_tileglyph() understands following   aesthetics (required aesthetics bold): x y alpha group size See vignette(\"ggplot2-specs\", package = \"ggplot2\")   details setting aesthetics. following additional aesthetics considered repel = TRUE: point.size segment.linetype segment.colour segment.size segment.alpha segment.curvature segment.angle segment.ncp segment.shape segment.square segment.squareShape segment.inflect segment.debug See ggrepel   examples page   details setting aesthetics.","code":""},{"path":"/reference/geom_tileglyph.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"Beddow J (1990). “Shape coding multidimensional data microcomputer display.” Proceedings First IEEE Conference Visualization: Visualization `90, 238--246. ISBN 978-0-8186-2083-6. Fuchs J, Fischer F, Mansmann F, Bertini E, Isenberg P (2013). “Evaluation alternative glyph designs time series data small multiple setting.” Proceedings SIGCHI Conference Human Factors Computing Systems, 3237--3246. ISBN 978-1-4503-1899-0.","code":""},{"path":[]},{"path":"/reference/geom_tileglyph.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Add Tile Glyphs as a Scatterplot — geom_tileglyph","text":"","code":"# Scale the data zs <- c(\"hp\", \"drat\", \"wt\", \"qsec\", \"vs\", \"am\", \"gear\", \"carb\") mtcars[ , zs] <- lapply(mtcars[ , zs], scales::rescale)  mtcars$cyl <- as.factor(mtcars$cyl) mtcars$lab <- row.names(mtcars)  library(ggplot2) theme_set(theme_bw()) options(ggplot2.discrete.colour = RColorBrewer::brewer.pal(8, \"Dark2\")) options(ggplot2.discrete.fill = RColorBrewer::brewer.pal(8, \"Dark2\"))  ggplot(data = mtcars) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 2,                  fill.gradient = \"Blues\",                  alpha =  0.5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 2,                  nrow = 2,                  fill.gradient = \"Greens\",                  alpha =  0.5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 1,                  ratio = 4,                  fill.gradient = \"RdYlBu\",                  alpha =  0.5) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 1,                  ratio = 4, nrow = 2,                  fill.gradient = \"viridis\",                  alpha =  0.5) +   ylim(c(-0, 550))   # Repel glyphs ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp)) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 2,                  fill.gradient = \"Blues\",                  alpha = 1, repel = TRUE) +   ylim(c(-0, 550))   ggplot(data = mtcars) +   geom_point(aes(x = mpg, y = disp)) +   geom_tileglyph(aes(x = mpg, y = disp),                  cols = zs, size = 1,                  ratio = 4, nrow = 2,                  fill.gradient = \"viridis\",                  alpha = 1, repel = TRUE) +   ylim(c(-0, 550))"},{"path":"/reference/gglyph.repel.control.html","id":null,"dir":"Reference","previous_headings":"","what":"Control parameters for the repel algorithm — gglyph.repel.control","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"Set contol parameters repel algorithm (Slowikowski 2021)  used various geoms (geom_*()) implemented gglyph repel glyphs .","code":""},{"path":"/reference/gglyph.repel.control.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"","code":"gglyph.repel.control(   box.padding = 0.25,   point.padding = 1e-06,   min.segment.length = 0.5,   arrow = NULL,   force = 1,   force_pull = 1,   max.time = 0.5,   max.iter = 10000,   max.overlaps = getOption(\"ggrepel.max.overlaps\", default = 10),   nudge_x = 0,   nudge_y = 0,   xlim = c(NA, NA),   ylim = c(NA, NA),   direction = c(\"both\", \"y\", \"x\"),   seed = NA,   verbose = FALSE )"},{"path":"/reference/gglyph.repel.control.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"box.padding Amount padding around bounding box, unit number. Defaults 0.25. (Default unit lines, units can specified passing unit(x, \"units\")). point.padding Amount padding around labeled point, unit number. Defaults 0. (Default unit lines, units can specified passing unit(x, \"units\")). min.segment.length Skip drawing segments shorter , unit number. Defaults 0.5. (Default unit lines, units can specified passing unit(x, \"units\")). arrow specification arrow heads, created arrow. force Force repulsion overlapping glyphs. Defaults 1. force_pull Force attraction glyph corresponding data point. Defaults 1. max.time Maximum number seconds try resolve overlaps. Defaults 0.5. max.iter Maximum number iterations try resolve overlaps. Defaults 10000. max.overlaps Exclude glyphs overlap many things. Defaults 10. nudge_x, nudge_y Horizontal vertical adjustments nudge starting position glyph. units nudge_x nudge_y data units x-axis y-axis. xlim, ylim Limits x y axes. Glyphs constrained limits. default, glyphs constrained entire plot area. direction \"\", \"x\", \"y\" -- direction adjust position glyphs. seed Random seed passed set.seed. Defaults NA, means set.seed called. verbose TRUE, diagnostics repel algorithm printed.","code":""},{"path":"/reference/gglyph.repel.control.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"list following components control repel algorithm   corresponding Arguments. box.padding  point.padding  min.segment.length  arrow  force  force_pull  max.time  max.iter  max.overlaps  nudge_x, nudge_y  xlim, ylim  direction  seed  verbose","code":""},{"path":"/reference/gglyph.repel.control.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"Slowikowski K (2021). “ggrepel: Automatically position non-overlapping text labels 'ggplot2'. R package version 0.9.1.”","code":""},{"path":[]},{"path":"/reference/gglyph.repel.control.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Control parameters for the repel algorithm — gglyph.repel.control","text":"","code":"# Adjust force gglyph.repel.control(force = 0.5) #> $box.padding #> [1] 0.25 #>  #> $point.padding #> [1] 1e-06 #>  #> $min.segment.length #> [1] 0.5 #>  #> $arrow #> NULL #>  #> $force #> [1] 0.5 #>  #> $force_pull #> [1] 1 #>  #> $max.time #> [1] 0.5 #>  #> $max.iter #> [1] 10000 #>  #> $max.overlaps #> [1] 10 #>  #> $nudge_x #> [1] 0 #>  #> $nudge_y #> [1] 0 #>  #> $xlim #> [1] NA NA #>  #> $ylim #> [1] NA NA #>  #> $direction #> [1] \"both\" #>  #> $seed #> [1] NA #>  #> $verbose #> [1] FALSE #>   # Adjust max.iter gglyph.repel.control(max.iter = 5000) #> $box.padding #> [1] 0.25 #>  #> $point.padding #> [1] 1e-06 #>  #> $min.segment.length #> [1] 0.5 #>  #> $arrow #> NULL #>  #> $force #> [1] 1 #>  #> $force_pull #> [1] 1 #>  #> $max.time #> [1] 0.5 #>  #> $max.iter #> [1] 5000 #>  #> $max.overlaps #> [1] 10 #>  #> $nudge_x #> [1] 0 #>  #> $nudge_y #> [1] 0 #>  #> $xlim #> [1] NA NA #>  #> $ylim #> [1] NA NA #>  #> $direction #> [1] \"both\" #>  #> $seed #> [1] NA #>  #> $verbose #> [1] FALSE #>"},{"path":"/reference/metroglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Metroglyph — metroglyphGrob","title":"Draw a Metroglyph — metroglyphGrob","text":"Uses Grid graphics draw metroglyph (Anderson 1957; duToit et al. 1986) .","code":""},{"path":"/reference/metroglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Metroglyph — metroglyphGrob","text":"","code":"metroglyphGrob(   x = 0.5,   y = 0.5,   z,   size = 1,   circle.size = 5,   col.circle = \"black\",   col.ray = \"black\",   col.points = \"black\",   fill = NA,   lwd.circle = 1,   lwd.ray = 1,   alpha = 1,   angle.start = 0,   angle.stop = 2 * base::pi,   lineend = c(\"round\", \"butt\", \"square\"),   grid.levels = NULL,   draw.grid = FALSE,   grid.point.size = 10 )"},{"path":"/reference/metroglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Metroglyph — metroglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying length rays. size size rays. circle.size size central circle (radius). col.circle circle colour. col.ray colour rays. col.points colour grid points. fill circle fill colour. lwd.circle circle line width. lwd.ray ray line width. alpha alpha transparency value. angle.start start angle glyph rays radians. Default zero. angle.stop stop angle glyph rays radians. Default \\(2\\pi\\). lineend line end style rays. Either \"round\", \"butt\" \"square\". grid.levels list grid levels (vectors) corresponding values z points plotted. values z present list specified. draw.grid logical. TRUE, grid points plotted along whiskers. Default FALSE. grid.point.size size grid points native units.","code":""},{"path":"/reference/metroglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Metroglyph — metroglyphGrob","text":"gTree object.","code":""},{"path":"/reference/metroglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Metroglyph — metroglyphGrob","text":"Anderson E (1957). “semigraphical method analysis complex problems.” Proceedings National Academy Sciences United States America, 43(10), 923. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/metroglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Metroglyph — metroglyphGrob","text":"","code":"mglyph1 <- metroglyphGrob(x = 300, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 2)  mglyph2 <- metroglyphGrob(x = 800, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 5)  mglyph3 <- metroglyphGrob(x = 300, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 0,                           angle.start = base::pi, angle.stop = -base::pi)  mglyph4 <- metroglyphGrob(x = 800, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 10,                           angle.start = base::pi, angle.stop = -base::pi)  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)   mglyph1 <- metroglyphGrob(x = 200, y = 100,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 2,                           angle.start = -base::pi, angle.stop = 0)  mglyph2 <- metroglyphGrob(x = 800, y = 100,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 5,                           angle.start = -base::pi, angle.stop = 0)  mglyph3 <- metroglyphGrob(x = 200, y = 700,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 0,                           angle.start = 0, angle.stop = base::pi)  mglyph4 <- metroglyphGrob(x = 800, y = 700,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 10,                           angle.start = 0, angle.stop = base::pi)  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)   mglyph1 <- metroglyphGrob(x = 300, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 2, lwd.circle = 3)  mglyph2 <- metroglyphGrob(x = 900, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 5, lwd.circle = 3)  mglyph3 <- metroglyphGrob(x = 300, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 0,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3)  mglyph4 <- metroglyphGrob(x = 900, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 10,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3)  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)   mglyph1 <- metroglyphGrob(x = 300, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 2, lwd.circle = 3,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.circle = \"gray\")  mglyph2 <- metroglyphGrob(x = 900, y = 200,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 5, lwd.circle = 3,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.circle = \"white\", fill = \"black\")  mglyph3 <- metroglyphGrob(x = 300, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 0,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"))  mglyph4 <- metroglyphGrob(x = 900, y = 600,                           z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                           size = 25, circle.size = 10,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 5, lwd.circle = 15,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.circle = \"white\", fill = \"gray\")  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)   mg1 <- metroglyphGrob(x = 300, y = 200,                       z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                       size = 15, circle.size = 5,                       lwd.ray = 5)  mg2 <- metroglyphGrob(x = 500, y = 400,                       z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                       size = 15, circle.size = 5,                       lwd.ray = 5, lineend = \"butt\")  mg3 <- metroglyphGrob(x = 700, y = 600,                       z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                       size = 15, circle.size = 5,                       lwd.ray = 5, lineend = \"square\")  grid::grid.newpage() grid::grid.draw(mg1) grid::grid.draw(mg2) grid::grid.draw(mg3)   gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  mglyph1 <- metroglyphGrob(x = 200, y = 200,                           z = c(1, 3, 2, 1, 2, 3),                           size = 6, circle.size = 2, lwd.circle = 3,                           draw.grid = TRUE, grid.levels = gl)  mglyph2 <- metroglyphGrob(x = 800, y = 200,                           z = c(1, 3, 2, 1, 2, 3),                           size = 6, circle.size = 5, lwd.circle = 3,                           draw.grid = TRUE, grid.levels = gl)  mglyph3 <- metroglyphGrob(x = 250, y = 600,                           z = c(1, 3, 2, 1, 2, 3),                           size = 6, circle.size = 0,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3,                           draw.grid = TRUE, grid.levels = gl)  mglyph4 <- metroglyphGrob(x = 850, y = 600,                           z = c(1, 3, 2, 1, 2, 3),                           size = 6, circle.size = 10,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3,                           draw.grid = TRUE, grid.levels = gl)  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)   gl <- split(x = rep(c(0, 1, 2), 6),             f = rep(1:6, each = 3))  mglyph1 <- metroglyphGrob(x = 200, y = 200,                           z = c(0, 2, 1, 0, 1, 2),                           size = 10, circle.size = 2, lwd.circle = 3,                           draw.grid = TRUE, grid.levels = gl,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.points = NA)  mglyph2 <- metroglyphGrob(x = 800, y = 200,                           z = c(0, 2, 1, 0, 1, 2),                           size = 10, circle.size = 5, lwd.circle = 3,                           draw.grid = TRUE, grid.levels = gl,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"))  mglyph3 <- metroglyphGrob(x = 250, y = 600,                           z = c(0, 2, 1, 0, 1, 2),                           size = 10, circle.size = 0,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3,                           draw.grid = TRUE, grid.levels = gl,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.points = \"white\")  mglyph4 <- metroglyphGrob(x = 850, y = 600,                           z = c(0, 2, 1, 0, 1, 2),                           size = 10, circle.size = 10,                           angle.start = base::pi, angle.stop = -base::pi,                           lwd.ray = 3,                           draw.grid = TRUE, grid.levels = gl,                           col.ray = RColorBrewer::brewer.pal(6, \"Dark2\"),                           col.points = NA, grid.point.size = 20)  grid::grid.newpage() grid::grid.draw(mglyph1) grid::grid.draw(mglyph2) grid::grid.draw(mglyph3) grid::grid.draw(mglyph4)"},{"path":"/reference/pieglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Pie Glyph — pieglyphGrob","title":"Draw a Pie Glyph — pieglyphGrob","text":"Uses Grid graphics draw circular pie clock glyph (Ward Lipchak 2000; Fuchs et al. 2013) .","code":""},{"path":"/reference/pieglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Pie Glyph — pieglyphGrob","text":"","code":"pieglyphGrob(   x = 0.5,   y = 0.5,   z,   size = 1,   edges = 200,   col = \"black\",   fill = NA,   lwd = 1,   alpha = 1,   angle.start = 0,   angle.stop = 2 * base::pi,   linejoin = c(\"mitre\", \"round\", \"bevel\"),   scale.segment = FALSE,   scale.radius = TRUE,   grid.levels = NULL,   draw.grid = FALSE,   col.grid = \"grey\",   lwd.grid = lwd )"},{"path":"/reference/pieglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Pie Glyph — pieglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying values plotted dimensions pie glyph according arguments scale.segment scale.radius. size size glyphs (radius). edges number edges polygon depict circular glyph outline. col line colour. fill fill colour. lwd line width. alpha alpha transparency value. angle.start start angle glyph radians. Default zero. angle.stop stop angle glyph radians. Default \\(2\\pi\\). linejoin line join style pie segment polygons. Either \"mitre\", \"round\" \"bevel\". scale.segment logical. TRUE, segments (pie slices) scaled according value z. scale.radius logical. TRUE, radius segments (pie slices) scaled according value z. grid.levels list grid levels (vectors) corresponding values z grid lines plotted. values z present list specified. draw.grid logical. TRUE, grid lines plotted along segments scale.radius = TRUE. Default FALSE. col.grid colour grid lines. lwd.grid line width grid lines.","code":""},{"path":"/reference/pieglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Pie Glyph — pieglyphGrob","text":"gTree object.","code":""},{"path":"/reference/pieglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Pie Glyph — pieglyphGrob","text":"Fuchs J, Fischer F, Mansmann F, Bertini E, Isenberg P (2013). “Evaluation alternative glyph designs time series data small multiple setting.” Proceedings SIGCHI Conference Human Factors Computing Systems, 3237--3246. ISBN 978-1-4503-1899-0. Ward MO, Lipchak BN (2000). “visualization tool exploratory analysis cyclic multivariate data.” Metrika, 51(1), 27--37.","code":""},{"path":[]},{"path":"/reference/pieglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Pie Glyph — pieglyphGrob","text":"","code":"p1 <- pieglyphGrob(x = 250, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20)  p2 <- pieglyphGrob(x = 500, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.radius = FALSE)  p3 <- pieglyphGrob(x = 900, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.segment = TRUE, scale.radius = FALSE)  p4 <- pieglyphGrob(x = 250, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, angle.start = 0, angle.stop = base::pi)  p5 <- pieglyphGrob(x = 500, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.radius = FALSE,                    angle.start = 0, angle.stop = base::pi)  p6 <- pieglyphGrob(x = 900, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.segment = TRUE, scale.radius = FALSE,                    angle.start = 0, angle.stop = base::pi)  grid::grid.newpage() grid::grid.draw(p1) grid::grid.draw(p2) grid::grid.draw(p3) grid::grid.draw(p4) grid::grid.draw(p5) grid::grid.draw(p6)   p1 <- pieglyphGrob(x = 250, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p2 <- pieglyphGrob(x = 500, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.radius = FALSE,                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p3 <- pieglyphGrob(x = 900, y = 200,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.segment = TRUE, scale.radius = FALSE,                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p4 <- pieglyphGrob(x = 250, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, angle.start = 0, angle.stop = base::pi,                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p5 <- pieglyphGrob(x = 500, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.radius = FALSE,                    angle.start = 0, angle.stop = base::pi,                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p6 <- pieglyphGrob(x = 900, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, scale.segment = TRUE, scale.radius = FALSE,                    angle.start = 0, angle.stop = base::pi,                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  grid::grid.newpage() grid::grid.draw(p1) grid::grid.draw(p2) grid::grid.draw(p3) grid::grid.draw(p4) grid::grid.draw(p5) grid::grid.draw(p6)   p1 <- pieglyphGrob(x = 300, y = 250,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, lwd = 5)  p2 <- pieglyphGrob(x = 500, y = 450,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, lwd = 5, linejoin = \"round\")  p3 <- pieglyphGrob(x = 700, y = 650,                    z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33),                    size = 20, lwd = 5, linejoin = \"bevel\")  grid::grid.newpage() grid::grid.draw(p1) grid::grid.draw(p2) grid::grid.draw(p3)   dims = c(1, 3, 2, 1, 2, 3) gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  p1 <- pieglyphGrob(x = 200, y = 250,                    z = dims, size = 8,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 2, col.grid = \"black\")  p2 <- pieglyphGrob(x = 700, y = 250,                    angle.start = 0, angle.stop = base::pi,                    z = dims, size = 8,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 2, col.grid = \"black\")  p3 <- pieglyphGrob(x = 200, y = 600,                    z = dims, size = 8, scale.segment = TRUE,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 2, col.grid = \"black\")  p4 <- pieglyphGrob(x = 700, y = 600,                    angle.start = 0, angle.stop = base::pi,                    z = dims, size = 8, scale.segment = TRUE,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 2, col.grid = \"black\")  grid::grid.newpage() grid::grid.draw(p1) grid::grid.draw(p2) grid::grid.draw(p3) grid::grid.draw(p4)   dims = c(1, 3, 2, 1, 2, 3) gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  p1 <- pieglyphGrob(x = 200, y = 250,                    z = dims, size = 8, col = \"white\",                    draw.grid = TRUE, grid.levels = gl,                    lwd = 3, col.grid = \"white\",                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p2 <- pieglyphGrob(x = 700, y = 250,                    angle.start = 0, angle.stop = base::pi,                    z = dims, size = 8, col = \"white\",                    draw.grid = TRUE, grid.levels = gl,                    lwd = 3, col.grid = \"white\",                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p3 <- pieglyphGrob(x = 200, y = 600,                    z = dims, size = 8,                    col = \"white\", scale.segment = TRUE,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 3, col.grid = \"white\",                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  p4 <- pieglyphGrob(x = 700, y = 600,                    angle.start = 0, angle.stop = base::pi,                    z = dims, size = 8,                    col = \"white\", scale.segment = TRUE,                    draw.grid = TRUE, grid.levels = gl,                    lwd = 3, col.grid = \"white\",                    fill = RColorBrewer::brewer.pal(6, \"Dark2\"))   grid::grid.newpage() grid::grid.draw(p1) grid::grid.draw(p2) grid::grid.draw(p3) grid::grid.draw(p4)"},{"path":"/reference/profileglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Profile Glyph — profileglyphGrob","title":"Draw a Profile Glyph — profileglyphGrob","text":"Uses Grid graphics draw profile glyph (Chambers et al. 1983; duToit et al. 1986) .","code":""},{"path":"/reference/profileglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Profile Glyph — profileglyphGrob","text":"","code":"profileglyphGrob(   x = 0.5,   y = 0.5,   z,   size = 1,   col.bar = \"black\",   col.line = \"black\",   fill = NA,   lwd.bar = 1,   lwd.line = 1,   alpha = 1,   width = 5,   flip.axes = FALSE,   bar = TRUE,   line = TRUE,   mirror = TRUE,   linejoin = c(\"mitre\", \"round\", \"bevel\"),   lineend = c(\"round\", \"butt\", \"square\"),   grid.levels = NULL,   draw.grid = FALSE,   col.grid = \"grey\",   lwd.grid = 1 )"},{"path":"/reference/profileglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Profile Glyph — profileglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying values plotted dimensions profile (length bars). size size glyphs. col.bar colour bars. col.line colour profile line(s). fill fill colour. lwd.bar line width bars. lwd.line line width profile line(s) alpha alpha transparency value. width width bars. flip.axes logical. TRUE, axes flipped. bar logical. TRUE, profile bars plotted. line logical. TRUE, profile line plotted. mirror logical. TRUE, mirror profile plotted. linejoin line join style profile line(s) bars. Either \"mitre\", \"round\" \"bevel\". lineend line end style whisker lines. Either \"round\", \"butt\" \"square\". grid.levels list grid levels (vectors) corresponding values z grid lines plotted. values z present list specified. draw.grid logical. TRUE, grid lines plotted along bars. Default FALSE. col.grid colour grid lines. lwd.grid line width grid lines.","code":""},{"path":"/reference/profileglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Profile Glyph — profileglyphGrob","text":"gTree object.","code":""},{"path":"/reference/profileglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Profile Glyph — profileglyphGrob","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2.","code":""},{"path":[]},{"path":"/reference/profileglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Profile Glyph — profileglyphGrob","text":"","code":"# mirror = TRUE dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) barglyph <- profileglyphGrob(x = 200, y = 200, z = dims,                              size = 20)  barprofileglyph <- profileglyphGrob(x = 450, y = 200, z = dims,                                     size = 20, line = FALSE)  profileglyph <- profileglyphGrob(x = 700, y = 200, z = dims,                                  size = 20, line = TRUE, bar = FALSE) grid::grid.newpage() grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 450, z = dims,                              size = 20,                              col.bar = \"salmon\", col.line = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 450, z = dims,                                     size = 20, line = FALSE,                                     col.bar = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 450, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  col.line = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 700, z = dims, size = 20,                              fill = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 700, z = dims,                                     size = 20, line = FALSE,                                     fill = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 700, z = dims, size = 20,                                  line = TRUE, bar = FALSE,                                  fill = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)    # mirror = FALSE dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) barglyph <- profileglyphGrob(x = 200, y = 300, z = dims,                              size = 20,                              mirror = FALSE)  barprofileglyph <- profileglyphGrob(x = 450, y = 300, z = dims,                                     size = 20, line = FALSE,                                     mirror = FALSE)  profileglyph <- profileglyphGrob(x = 700, y = 300, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  mirror = FALSE) grid::grid.newpage() grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 550, z = dims,                              size = 20, mirror = FALSE,                              col.bar = \"salmon\", col.line = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 550, z = dims,                                     size = 20, line = FALSE, mirror = FALSE,                                     col.bar = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 550, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  mirror = FALSE, col.line = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)#'  barglyph <- profileglyphGrob(x = 200, y = 800, z = dims, size = 20,                              fill = \"salmon\", mirror = FALSE)  barprofileglyph <- profileglyphGrob(x = 450, y = 800, z = dims,                                     size = 20, line = FALSE, mirror = FALSE,                                     fill = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 800, z = dims, size = 20,                                  line = TRUE, bar = FALSE,                                  mirror = FALSE, fill = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)   # mirror = TRUE, flip.axes = TRUE dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) barglyph <- profileglyphGrob(x = 200, y = 200, z = dims,                              size = 20, flip.axes = TRUE)  barprofileglyph <- profileglyphGrob(x = 450, y = 200, z = dims,                                     size = 20, line = FALSE,                                     flip.axes = TRUE)  profileglyph <- profileglyphGrob(x = 700, y = 200, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  flip.axes = TRUE) grid::grid.newpage() grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 450, z = dims,                              size = 20, flip.axes = TRUE,                              col.bar = \"salmon\", col.line = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 450, z = dims,                                     size = 20, line = FALSE,                                     flip.axes = TRUE,                                     col.bar = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 450, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  flip.axes = TRUE,                                  col.line = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 700, z = dims, size = 20,                              flip.axes = TRUE,                              fill = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 700, z = dims,                                     size = 20, line = FALSE,                                     flip.axes = TRUE,                                     fill = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 700, z = dims, size = 20,                                  line = TRUE, bar = FALSE,                                  flip.axes = TRUE,                                  fill = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)    # mirror = FALSE, flip.axes = TRUE dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) barglyph <- profileglyphGrob(x = 200, y = 200, z = dims,                              size = 20, flip.axes = TRUE,                              mirror = FALSE)  barprofileglyph <- profileglyphGrob(x = 450, y = 200, z = dims,                                     size = 20, line = FALSE,                                     flip.axes = TRUE,                                     mirror = FALSE)  profileglyph <- profileglyphGrob(x = 700, y = 200, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  flip.axes = TRUE,                                  mirror = FALSE) grid::grid.newpage() grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 450, z = dims,                              size = 20, mirror = FALSE,                              flip.axes = TRUE,                              col.bar = \"salmon\", col.line = \"salmon\")  barprofileglyph <- profileglyphGrob(x = 450, y = 450, z = dims,                                     size = 20, line = FALSE, mirror = FALSE,                                     flip.axes = TRUE,                                     col.bar = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 450, z = dims,                                  size = 20, line = TRUE, bar = FALSE,                                  flip.axes = TRUE,                                  mirror = FALSE, col.line = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)  barglyph <- profileglyphGrob(x = 200, y = 700, z = dims, size = 20,                              flip.axes = TRUE,                              fill = \"salmon\", mirror = FALSE)  barprofileglyph <- profileglyphGrob(x = 450, y = 700, z = dims,                                     size = 20, line = FALSE, mirror = FALSE,                                     flip.axes = TRUE,                                     fill = \"cyan\")  profileglyph <- profileglyphGrob(x = 700, y = 700, z = dims, size = 20,                                  line = TRUE, bar = FALSE,                                  flip.axes = TRUE,                                  mirror = FALSE, fill = \"green\")  grid::grid.draw(barglyph) grid::grid.draw(barprofileglyph) grid::grid.draw(profileglyph)   # linejoin variants dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) pg1 <- profileglyphGrob(x = 200, y = 150, z = dims,                         size = 25, lwd.bar = 5, width = 8)  pg2 <- profileglyphGrob(x = 500, y = 400, z = dims,                         size = 25, lwd.bar = 5, width = 8,                         linejoin = \"round\")  pg3 <- profileglyphGrob(x = 800, y = 650, z = dims,                         size = 25, lwd.bar = 5, width = 8,                         linejoin = \"bevel\")  grid::grid.newpage() grid::grid.draw(pg1) grid::grid.draw(pg2) grid::grid.draw(pg3)   dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) pg1 <- profileglyphGrob(x = 200, y = 150, z = dims,                         size = 25, lwd.line = 5, width = 8,                         bar = FALSE)  pg2 <- profileglyphGrob(x = 500, y = 400, z = dims,                         size = 25, lwd.line = 5, width = 8,                         linejoin = \"round\", bar = FALSE)  pg3 <- profileglyphGrob(x = 800, y = 650, z = dims,                         size = 25, lwd.line = 5, width = 8,                         linejoin = \"bevel\", bar = FALSE)  grid::grid.newpage() grid::grid.draw(pg1) grid::grid.draw(pg2) grid::grid.draw(pg3)   dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) pg1 <- profileglyphGrob(x = 200, y = 150, z = dims,                         size = 25, lwd.bar = 5, width = 8,                         line = FALSE)  pg2 <- profileglyphGrob(x = 500, y = 400, z = dims,                         size = 25, lwd.bar = 5, width = 8,                         linejoin = \"round\", line = FALSE)  pg3 <- profileglyphGrob(x = 800, y = 650, z = dims,                         size = 25, lwd.bar = 5, width = 8,                         linejoin = \"bevel\", line = FALSE)  grid::grid.newpage() grid::grid.draw(pg1) grid::grid.draw(pg2) grid::grid.draw(pg3)   # lineend variants dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) pg1 <- profileglyphGrob(x = 200, y = 150, z = dims,                         size = 25, lwd.line = 5, width = 8)  pg2 <- profileglyphGrob(x = 500, y = 400, z = dims,                         size = 25, lwd.line = 5, width = 8,                         lineend = \"butt\")  pg3 <- profileglyphGrob(x = 800, y = 650, z = dims,                         size = 25, lwd.line = 5, width = 8,                         lineend = \"square\")  grid::grid.newpage() grid::grid.draw(pg1) grid::grid.draw(pg2) grid::grid.draw(pg3)   # Bars with multiple fill colours dims = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33) bg1 <- profileglyphGrob(x = 200, y = 200, z = dims,                         size = 20,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bpg1 <- profileglyphGrob(x = 700, y = 200, z = dims,                          size = 20, line = FALSE,                          fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg2 <- profileglyphGrob(x = 350, y = 450, z = dims,                         size = 20, mirror = FALSE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bpg2 <- profileglyphGrob(x = 850, y = 450, z = dims,                          size = 20, line = FALSE, mirror = FALSE,                          fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg3 <- profileglyphGrob(x = 200, y = 650, z = dims,                         size = 20, flip.axes = TRUE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bpg3 <- profileglyphGrob(x = 700, y = 650, z = dims,                          size = 20, line = FALSE, flip.axes = TRUE,                          fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg4 <- profileglyphGrob(x = 350, y = 700, z = dims,                         size = 20, mirror = FALSE, flip.axes = TRUE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bpg4 <- profileglyphGrob(x = 850, y = 700, z = dims,                          size = 20, line = FALSE, mirror = FALSE,                          flip.axes = TRUE,                          fill = RColorBrewer::brewer.pal(6, \"Dark2\"))   grid::grid.newpage() grid::grid.draw(bg1) grid::grid.draw(bpg1) grid::grid.draw(bg2) grid::grid.draw(bpg2) grid::grid.draw(bg3) grid::grid.draw(bpg3) grid::grid.draw(bg4) grid::grid.draw(bpg4)   # Grid lines dims = c(1, 3, 2, 1, 2, 3) gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  bg1 <- profileglyphGrob(x = 150, y = 200, z = dims,                         size = 10, width = 5,                         draw.grid = TRUE, lwd.bar = 5,                         grid.levels = gl, col.grid = \"black\")  bg2 <- profileglyphGrob(x = 400, y = 250, z = dims,                         size = 10, width = 5, lwd.bar = 5,                         draw.grid = TRUE, mirror = FALSE,                         grid.levels = gl, col.grid = \"black\")  bg3 <- profileglyphGrob(x = 650, y = 200, z = dims,                         size = 10, width = 5, flip.axes = TRUE,                         draw.grid = TRUE, lwd.bar = 5,                         grid.levels = gl, col.grid = \"black\")  bg4 <- profileglyphGrob(x = 800, y = 200, z = dims,                         size = 10, width = 5, flip.axes = TRUE,                         draw.grid = TRUE, mirror = FALSE,                         grid.levels = gl, col.grid = \"black\",                         lwd.bar = 5)  bg5 <- profileglyphGrob(x = 150, y = 500, z = dims,                         size = 10, width = 5,                         draw.grid = TRUE, lwd.bar = 5,                         grid.levels = gl, col.grid = \"white\",                         col.bar = \"white\", line = FALSE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg6 <- profileglyphGrob(x = 400, y = 550, z = dims,                         size = 10, width = 5, lwd.bar = 5,                         draw.grid = TRUE, mirror = FALSE,                         grid.levels = gl, col.grid = \"white\",                         col.bar = \"white\", line = FALSE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg7 <- profileglyphGrob(x = 650, y = 500, z = dims,                         size = 10, width = 5, flip.axes = TRUE,                         draw.grid = TRUE, lwd.bar = 5,                         grid.levels = gl, col.grid = \"white\",                         col.bar = \"white\", line = FALSE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))  bg8 <- profileglyphGrob(x = 800, y = 500, z = dims,                         size = 10, width = 5, flip.axes = TRUE,                         draw.grid = TRUE, mirror = FALSE,                         grid.levels = gl, col.grid = \"white\",                         col.bar = \"white\", lwd.bar = 5, line = FALSE,                         fill = RColorBrewer::brewer.pal(6, \"Dark2\"))   grid::grid.newpage() grid::grid.draw(bg1) grid::grid.draw(bg2) grid::grid.draw(bg3) grid::grid.draw(bg4) grid::grid.draw(bg5) grid::grid.draw(bg6) grid::grid.draw(bg7) grid::grid.draw(bg8)"},{"path":"/reference/starglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Star Glyph — starglyphGrob","title":"Draw a Star Glyph — starglyphGrob","text":"Uses Grid graphics draw star glyph (Siegel et al. 1972; Chambers et al. 1983; duToit et al. 1986) .","code":""},{"path":"/reference/starglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Star Glyph — starglyphGrob","text":"","code":"starglyphGrob(   x = 0.5,   y = 0.5,   z,   size = 1,   col.whisker = \"black\",   col.contour = \"black\",   col.points = \"black\",   fill = NA,   lwd.whisker = 1,   lwd.contour = 1,   alpha = 1,   angle.start = 0,   angle.stop = 2 * base::pi,   whisker = TRUE,   contour = TRUE,   linejoin = c(\"mitre\", \"round\", \"bevel\"),   lineend = c(\"round\", \"butt\", \"square\"),   grid.levels = NULL,   draw.grid = FALSE,   grid.point.size = 10 )"},{"path":"/reference/starglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Star Glyph — starglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying distance star glyph points centre. size size glyphs. col.whisker colour whiskers. col.contour colour contours. col.points colour grid points. fill fill colour. lwd.whisker whisker line width. lwd.contour contour line width. alpha alpha transparency value. angle.start start angle glyph radians. Default zero. angle.stop stop angle glyph radians. Default \\(2\\pi\\). whisker logical. TRUE, plots star glyph whiskers. contour logical. TRUE, plots star glyph contours. linejoin line join style contour polygon. Either \"mitre\", \"round\" \"bevel\". lineend line end style whisker lines. Either \"round\", \"butt\" \"square\". grid.levels list grid levels (vectors) corresponding values z points plotted. values z present list specified. draw.grid logical. TRUE, grid points plotted along whiskers. Default FALSE. grid.point.size size grid points native units.","code":""},{"path":"/reference/starglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Star Glyph — starglyphGrob","text":"gTree object.","code":""},{"path":"/reference/starglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Star Glyph — starglyphGrob","text":"Chambers JM, Cleveland WS, Kleiner B, Tukey PA (1983). Graphical Methods Data Analysis. Chapman Hall/CRC, Boca Raton. ISBN 978-1-351-07230-4. duToit SHC, Steyn AGW, Stumpf RH (1986). Graphical Exploratory Data Analysis,  Springer Texts Statistics. Springer-Verlag, New York. ISBN 978-1-4612-9371-2. Siegel JH, Farrell EJ, Goldwyn RM, Friedman HP (1972). “surgical implications physiologic patterns myocardial infarction shock.” Surgery, 72(1), 126--141.","code":""},{"path":[]},{"path":"/reference/starglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Star Glyph — starglyphGrob","text":"","code":"sg1 <- starglyphGrob(x = 400, y = 150,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25)  sg2 <- starglyphGrob(x = 400, y = 400,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1)  sg3 <- starglyphGrob(x = 400, y = 650,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3)  sg4 <- starglyphGrob(x = 800, y = 300,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      angle.start = 0, angle.stop = base::pi)  sg5 <- starglyphGrob(x = 800, y = 550,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1,                      angle.start = 0, angle.stop = base::pi)  sg6 <- starglyphGrob(x = 800, y = 800,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3,                      angle.start = 0, angle.stop = base::pi)  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3) grid::grid.draw(sg4) grid::grid.draw(sg5) grid::grid.draw(sg6)   sg1 <- starglyphGrob(x = 400, y = 150,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      fill = \"salmon\")  sg2 <- starglyphGrob(x = 400, y = 400,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1,                      fill = \"cyan\")  sg3 <- starglyphGrob(x = 400, y = 650,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3,                      fill = \"green\")  sg4 <- starglyphGrob(x = 800, y = 300,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      angle.start = 0, angle.stop = base::pi,                      fill = \"salmon\")  sg5 <- starglyphGrob(x = 800, y = 550,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1,                      angle.start = 0, angle.stop = base::pi,                      fill = \"cyan\")  sg6 <- starglyphGrob(x = 800, y = 800,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3,                      angle.start = 0, angle.stop = base::pi,                      fill = \"green\")  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3) grid::grid.draw(sg4) grid::grid.draw(sg5) grid::grid.draw(sg6)   sg1 <- starglyphGrob(x = 400, y = 150,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  sg2 <- starglyphGrob(x = 400, y = 400,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  sg3 <- starglyphGrob(x = 400, y = 650,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  sg4 <- starglyphGrob(x = 800, y = 300,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      angle.start = 0, angle.stop = base::pi,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  sg5 <- starglyphGrob(x = 800, y = 550,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 3,                      lwd.contour = 0.1,                      angle.start = 0, angle.stop = base::pi,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  sg6 <- starglyphGrob(x = 800, y = 800,                      z = c(0.24, 0.3, 0.8, 1.4, 0.6, 0.33), size = 25,                      lwd.whisker = 0.1,                      lwd.contour = 3,                      angle.start = 0, angle.stop = base::pi,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      col.contour = \"gray\")  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3) grid::grid.draw(sg4) grid::grid.draw(sg5) grid::grid.draw(sg6)   sg1 <- starglyphGrob(x = 300, y = 250,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.contour = 10)  sg2 <- starglyphGrob(x = 600, y = 300,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.contour = 10, linejoin = \"bevel\")  sg3 <- starglyphGrob(x = 900, y = 350,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.contour = 10, linejoin = \"round\")  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3)   sg1 <- starglyphGrob(x = 300, y = 250,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.whisker = 10, contour = FALSE)  sg2 <- starglyphGrob(x = 600, y = 300,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.whisker = 10, lineend = \"butt\", contour = FALSE)  sg3 <- starglyphGrob(x = 900, y = 350,                      z = c(0.28, 0.33, 0.8, 1.2, 0.6, 0.5, 0.7), size = 25,                      lwd.whisker = 10, lineend = \"square\", contour = FALSE)  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3)   gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  sg1 <- starglyphGrob(x = 150, y = 150,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      draw.grid = TRUE, grid.levels = gl)  sg2 <- starglyphGrob(x = 150, y = 400,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.whisker = 3, col.points = \"white\",                      draw.grid = TRUE, grid.levels = gl,                      contour = FALSE)  sg3 <- starglyphGrob(x = 150, y = 650,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.contour = 3,                      draw.grid = FALSE, grid.levels = gl,                      whisker = FALSE)  sg4 <- starglyphGrob(x = 600, y = 150,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      angle.start = 0, angle.stop = base::pi,                      draw.grid = TRUE, grid.levels = gl)  sg5 <- starglyphGrob(x = 600, y = 400,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.whisker = 3,                      angle.start = 0, angle.stop = base::pi,                      draw.grid = TRUE, grid.levels = gl,                      grid.point.size = 20, contour = FALSE)  sg6 <- starglyphGrob(x = 600, y = 650,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.contour = 3,                      angle.start = 0, angle.stop = base::pi,                      draw.grid = FALSE, grid.levels = gl,                      whisker = FALSE)  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3) grid::grid.draw(sg4) grid::grid.draw(sg5) grid::grid.draw(sg6)   gl <- split(x = rep(c(1, 2, 3), 6),             f = rep(1:6, each = 3))  sg1 <- starglyphGrob(x = 150, y = 150,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      draw.grid = TRUE, grid.levels = gl,                      col.points = NA, fill = \"black\")  sg2 <- starglyphGrob(x = 150, y = 400,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.whisker = 3,                      draw.grid = TRUE, grid.levels = gl,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      contour = FALSE)  sg3 <- starglyphGrob(x = 150, y = 650,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.contour = 3,                      draw.grid = FALSE, grid.levels = gl,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      whisker = FALSE)  sg4 <- starglyphGrob(x = 600, y = 150,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      col.contour = \"gray\",                      angle.start = 0, angle.stop = base::pi,                      draw.grid = TRUE, grid.levels = gl,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      grid.point.size = 10, col.points = \"gray\")  sg5 <- starglyphGrob(x = 600, y = 400,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.whisker = 3,                      angle.start = 0, angle.stop = base::pi,                      draw.grid = TRUE, grid.levels = gl,                      col.whisker = RColorBrewer::brewer.pal(6, \"Dark2\"),                      grid.point.size = 20, col.points = NA,                      contour = FALSE)  sg6 <- starglyphGrob(x = 600, y = 650,                      z = c(1, 3, 2, 1, 2, 3), size = 5,                      lwd.contour = 3,                      angle.start = 0, angle.stop = base::pi,                      draw.grid = FALSE, grid.levels = gl,                      whisker = FALSE)  grid::grid.newpage() grid::grid.draw(sg1) grid::grid.draw(sg2) grid::grid.draw(sg3) grid::grid.draw(sg4) grid::grid.draw(sg5) grid::grid.draw(sg6)"},{"path":"/reference/tileglyphGrob.html","id":null,"dir":"Reference","previous_headings":"","what":"Draw a Tile Glyph — tileglyphGrob","title":"Draw a Tile Glyph — tileglyphGrob","text":"Uses Grid graphics draw tile glyph similar 'autoglyph' (Beddow 1990)  'stripe glyph' (Fuchs et al. 2013) .","code":""},{"path":"/reference/tileglyphGrob.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Draw a Tile Glyph — tileglyphGrob","text":"","code":"tileglyphGrob(   x = 0.5,   y = 0.5,   z,   size = 10,   ratio = 1,   nrow = 1,   col = \"black\",   fill = NA,   lwd = 1,   alpha = 1,   linejoin = c(\"mitre\", \"round\", \"bevel\") )"},{"path":"/reference/tileglyphGrob.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Draw a Tile Glyph — tileglyphGrob","text":"x numeric vector unit object specifying x-locations. y numeric vector unit object specifying y-locations. z numeric vector specifying values plotted dimensions tileglyph. size size glyphs. ratio aspect ratio (height / width). nrow number rows. col line colour. fill fill colour. lwd line width. alpha alpha transparency value. linejoin line join style tile polygon. Either \"mitre\", \"round\" \"bevel\".","code":""},{"path":"/reference/tileglyphGrob.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Draw a Tile Glyph — tileglyphGrob","text":"grob object.","code":""},{"path":"/reference/tileglyphGrob.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"Draw a Tile Glyph — tileglyphGrob","text":"Beddow J (1990). “Shape coding multidimensional data microcomputer display.” Proceedings First IEEE Conference Visualization: Visualization `90, 238--246. ISBN 978-0-8186-2083-6. Fuchs J, Fischer F, Mansmann F, Bertini E, Isenberg P (2013). “Evaluation alternative glyph designs time series data small multiple setting.” Proceedings SIGCHI Conference Human Factors Computing Systems, 3237--3246. ISBN 978-1-4503-1899-0.","code":""},{"path":[]},{"path":"/reference/tileglyphGrob.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Draw a Tile Glyph — tileglyphGrob","text":"","code":"tg1 <- tileglyphGrob(x = 150, y = 150,                    z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                    size = 5)  tg2 <- tileglyphGrob(x = 450, y = 150,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 5)  tg3 <- tileglyphGrob(x = 150, y = 250,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5, nrow = 2)  tg4 <- tileglyphGrob(x = 450, y = 250,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 5, nrow = 2)  tg5 <- tileglyphGrob(x = 150, y = 350,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg6 <- tileglyphGrob(x = 450, y = 350,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 5,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg7 <- tileglyphGrob(x = 150, y = 450,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5, nrow = 2,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg8 <- tileglyphGrob(x = 450, y = 450,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 5, nrow = 2,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  grid::grid.newpage() grid::grid.draw(tg1) grid::grid.draw(tg2) grid::grid.draw(tg3) grid::grid.draw(tg4) grid::grid.draw(tg5) grid::grid.draw(tg6) grid::grid.draw(tg7) grid::grid.draw(tg8)   tg1 <- tileglyphGrob(x = 150, y = 150,                    z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                    size = 2, ratio = 6)  tg2 <- tileglyphGrob(x = 450, y = 150,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 2, ratio = 6)  tg3 <- tileglyphGrob(x = 150, y = 300,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 2, nrow = 2, ratio = 6)  tg4 <- tileglyphGrob(x = 450, y = 300,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 2, nrow = 2, ratio = 6)  tg5 <- tileglyphGrob(x = 150, y = 450,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 2, ratio = 6,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg6 <- tileglyphGrob(x = 450, y = 450,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 2, ratio = 6,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg7 <- tileglyphGrob(x = 150, y = 600,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 2, nrow = 2, ratio = 6,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  tg8 <- tileglyphGrob(x = 450, y = 600,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7),                      size = 2, nrow = 2, ratio = 6,                      fill = RColorBrewer::brewer.pal(7, \"Dark2\"))  grid::grid.newpage() grid::grid.draw(tg1) grid::grid.draw(tg2) grid::grid.draw(tg3) grid::grid.draw(tg4) grid::grid.draw(tg5) grid::grid.draw(tg6) grid::grid.draw(tg7) grid::grid.draw(tg8)   tg1 <- tileglyphGrob(x = 150, y = 150,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5, nrow = 2, lwd = 5)  tg2 <- tileglyphGrob(x = 300, y = 300,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5, nrow = 2, lwd = 5,                      linejoin = \"round\")  tg3 <- tileglyphGrob(x = 450, y = 450,                      z = c(4, 3.5, 2.7, 6.8, 3.4, 5.7, 4.3),                      size = 5, nrow = 2, lwd = 5,                      linejoin = \"bevel\")   grid::grid.newpage() grid::grid.draw(tg1) grid::grid.draw(tg2) grid::grid.draw(tg3)"},{"path":"/news/index.html","id":"gglyph-0009000","dir":"Changelog","previous_headings":"","what":"gglyph 0.0.0.9000","title":"gglyph 0.0.0.9000","text":"Pre-release","code":""}]
